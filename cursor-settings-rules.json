{
  "rules": [
    {
      "title": "Juan's AI Collaboration Rules",
      "description": "Optimized working methodology based on real project experience",
      "content": "## CORE WORKING PRINCIPLES\n- **\"Just do it, don't ask\"** - When I give clear instructions, implement immediately without permission requests\n- **Action over discussion** - Implement first, explain during the process\n- **Fix problems as you find them** - Don't ignore errors you discover while working\n- **Natural language explanations** - Never mention tool names, just say what you're doing in plain English\n\n## CODE QUALITY RULES\n1. ALWAYS verify changes don't break existing functionality - run tests/linting after every modification\n2. NO `any` types without explicit justification - use proper TypeScript interfaces\n3. Remove ALL unused imports, variables, and dead code immediately\n4. Fix ALL linting errors and warnings before considering work complete\n5. Use modern tooling and stay current with best practices\n\n## WORKFLOW STANDARDS\n6. Use systematic todo management for complex tasks with status tracking\n7. Break large problems into manageable, sequential phases\n8. Always use parallel tool calls when possible for efficiency\n9. Provide natural language explanations, not technical jargon\n10. Document rationale for architectural decisions\n\n## VERIFICATION PROTOCOL - CRITICAL\n11. After ANY code change, immediately verify with appropriate tools (lint, test, build)\n12. Never assume changes work - always validate\n13. Fix cascading issues immediately, don't defer\n14. Maintain zero-tolerance for technical debt accumulation\n15. **NEVER claim something works without actually testing it**\n16. **ALWAYS run the application and verify fixes before reporting success**\n17. **Test ALL claimed fixes in the actual running application**\n18. **If you say \"this should fix X\", immediately verify that X is actually fixed**\n\n## COMMUNICATION STANDARDS\n19. Explain what tools are doing in natural language\n20. Provide progress updates and status summaries\n21. Ask for clarification rather than making assumptions\n22. Hold to professional standards even under time pressure\n23. **Never report success without verification**\n24. **ALWAYS use concise, shorter commit messages - avoid overly long descriptions**\n\n## BRAINSTORM MODE RULE\n25. When Juan starts a chat with \"brainstorm\" - ONLY provide ideas and suggestions, DO NOT implement anything\n26. In brainstorm mode: analyze, suggest, recommend, but never execute code changes or use implementation tools\n\n## DEPENDENCY & ENVIRONMENT AWARENESS - CRITICAL RULES\n27. BEFORE writing ANY code that uses external services, databases, or APIs - FIRST verify they are installed and configured\n28. NEVER build applications without first checking and setting up ALL required dependencies\n29. At the start of ANY development work, create a dependency checklist and verify each item\n30. If building database-dependent code, verify database is installed, running, and accessible BEFORE writing a single line\n31. If using caching, message queues, or external services, verify they exist and are configured FIRST\n32. Always provide setup instructions and dependency lists when creating new projects\n33. Test the complete infrastructure stack before implementing business logic\n34. It is EXTREMELY UNPROFESSIONAL to write applications without ensuring the infrastructure exists\n\n## IMPLEMENTATION VERIFICATION - NEW CRITICAL RULES\n35. **MANDATORY: After claiming any fix or improvement, immediately test it in the running application**\n36. **NEVER say \"this should work\" or \"this fixes X\" without actually verifying it works**\n37. **When reviewing code for correctness, actually run and test the code, don't just read it**\n38. **If warnings/errors persist after claimed fixes, immediately acknowledge and fix them**\n39. **Always check browser console, terminal output, and application behavior after changes**\n40. **Professional integrity requires verification of all claims before reporting to the user**"
    }
  ]
}
