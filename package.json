{
  "name": "gatas-news",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "(cd apps/frontend && npx next dev --port 3000 &) && nx dev api",
    "dev:frontend": "nx serve frontend",
    "dev:api": "nx dev api",
    "build": "nx run-many --target=build --all",
    "build:frontend": "cd apps/frontend && npx next build",
    "build:api": "nx build api",
    "start": "nx run-many --target=serve --projects=frontend,api --parallel --configuration=production",
    "start:frontend": "nx serve frontend --configuration=production",
    "start:api": "nx serve api --configuration=production",
    "lint": "nx run-many --target=lint --projects=shared-types,shared-utils,api,frontend",
    "lint:frontend": "nx run frontend:lint",
    "lint:api": "nx lint api",
    "test": "nx run-many --target=test --all",
    "test:frontend": "nx test frontend",
    "test:api": "nx test api",
    "format": "prettier --write \"**/*.{js,jsx,ts,tsx,json,md}\"",
    "graph": "nx graph",
    "reset": "nx reset",
    "migrate:celebrities": "cd apps/api && npx ts-node src/scripts/migrateCelebrities.ts",
    "setup": "./scripts/setup.sh",
    "db:status": "mongosh gatas-news --eval \"print('📊 Articles:', db.articles.countDocuments()); print('👥 Celebrities:', db.celebrities.countDocuments()); print('📋 Fetch Logs:', db.fetchlogs.countDocuments());\"",
    "db:clear:safe": "mongosh gatas-news --eval \"const articlesDeleted = db.articles.deleteMany({}).deletedCount; const logsDeleted = db.fetchlogs.deleteMany({}).deletedCount; const celebsCount = db.celebrities.countDocuments(); print('📊 SAFE CLEAR RESULTS:'); print('  Articles deleted:', articlesDeleted); print('  Logs deleted:', logsDeleted); print('  Celebrities preserved:', celebsCount);\"",
    "db:clear:articles": "mongosh gatas-news --eval \"const deleted = db.articles.deleteMany({}).deletedCount; print('🗑️ Articles cleared:', deleted);\"",
    "db:clear:logs": "mongosh gatas-news --eval \"const deleted = db.fetchlogs.deleteMany({}).deletedCount; print('🗑️ Fetch logs cleared:', deleted);\"",
    "db:clear:cache": "redis-cli -h localhost -p 6379 -n 0 FLUSHDB && echo '🗑️ Redis cache cleared'",
    "db:clear": "echo '⚠️ DEPRECATED: Use db:clear:safe instead to preserve celebrities' && npm run db:clear:safe",
    "db:reset:safe": "npm run db:clear:safe && npm run db:clear:cache && echo '✅ Safe database reset complete (celebrities preserved)'",
    "db:backup:celebrities": "mongosh gatas-news --eval \"db.celebrities.find().forEach(doc => print(JSON.stringify(doc)))\" > celebrities-backup.json && echo '💾 Celebrities backed up to celebrities-backup.json'",
    "db:emergency:check": "mongosh gatas-news --eval \"const count = db.celebrities.countDocuments(); print('🚨 CELEBRITY COUNT:', count); if (count < 50) { print('⚠️ CRITICAL: Low celebrity count detected!'); print('⚠️ Run: npm run db:emergency:restore'); } else { print('✅ Celebrity count is healthy'); }\"",
    "db:emergency:restore": "echo '🚨 EMERGENCY CELEBRITY RESTORE' && npm run migrate:celebrities",
    "api:health": "curl -s http://localhost:8000/health | jq .",
    "api:fetch": "curl -X POST http://localhost:8000/api/v1/admin/fetch/trigger -H 'Content-Type: application/json'",
    "api:news": "curl -s 'http://localhost:8000/api/v1/news?limit=5' | jq '.data.totalResults'",
    "services:start": "brew services start mongodb-community && brew services start redis",
    "services:stop": "brew services stop mongodb-community && brew services stop redis",
    "services:status": "brew services list | grep -E '(mongodb|redis)'",
    "logs:api": "tail -f apps/api/logs/combined.log",
    "logs:error": "tail -f apps/api/logs/error.log",
    "clean": "nx reset && rm -rf node_modules && npm install",
    "kill:port": "lsof -ti:8000 | xargs kill -9 || echo 'No processes on port 8000'",
    "validateKeys": "cd apps/api && node test-api-keys.js",
    "frontend:dev": "cd apps/frontend && npm run dev",
    "frontend:build": "cd apps/frontend && npm run build",
    "frontend:start": "cd apps/frontend && npm run start",
    "frontend:lint": "cd apps/frontend && npm run lint",
    "frontend:type-check": "cd apps/frontend && npx tsc --noEmit",
    "frontend:test": "cd apps/frontend && npm run test",
    "frontend:test:watch": "cd apps/frontend && npm run test:watch",
    "frontend:test:coverage": "cd apps/frontend && npm run test:coverage",
    "frontend:analyze": "cd apps/frontend && ANALYZE=true npm run build",
    "frontend:lighthouse": "lighthouse http://localhost:3000 --output=json --output-path=./lighthouse-report.json",
    "frontend:clean": "cd apps/frontend && rm -rf .next node_modules/.cache",
    "frontend:deps": "cd apps/frontend && npm audit && npm outdated",
    "frontend:preview": "cd apps/frontend && npm run build && npm run start",
    "kill:frontend": "lsof -ti:3000 | xargs kill -9 || echo 'No processes on port 3000'",
    "dev:full": "npm run services:start && npm run dev",
    "prepare": "husky"
  },
  "dependencies": {
    "@types/ioredis": "^4.28.10",
    "@types/node-cron": "^3.0.11",
    "axios": "^1.11.0",
    "compression": "^1.8.1",
    "cors": "^2.8.5",
    "critters": "^0.0.23",
    "dotenv": "^10.0.0",
    "express": "^4.17.1",
    "express-rate-limit": "^8.1.0",
    "express-validator": "^7.2.1",
    "helmet": "^8.1.0",
    "ioredis": "^5.7.0",
    "lucide-react": "^0.542.0",
    "mongoose": "^8.18.0",
    "morgan": "^1.10.1",
    "next": "^15.5.2",
    "node-cache": "^5.1.2",
    "node-cron": "^4.2.1",
    "react": "^19.1.1",
    "react-dom": "^19.1.1",
    "react-social-media-embed": "^2.5.18",
    "redis": "^5.8.2",
    "winston": "^3.17.0"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@eslint/js": "^9.35.0",
    "@nx/eslint": "^21.4.1",
    "@nx/jest": "^21.4.1",
    "@nx/js": "^21.4.1",
    "@nx/next": "^21.4.1",
    "@nx/node": "^21.4.1",
    "@nx/workspace": "^21.4.1",
    "@tailwindcss/cli": "^4.1.13",
    "@tailwindcss/postcss": "^4.1.13",
    "@testing-library/jest-dom": "^6.8.0",
    "@testing-library/react": "^16.3.0",
    "@testing-library/user-event": "^14.6.1",
    "@types/compression": "^1.8.1",
    "@types/cors": "^2.8.19",
    "@types/express": "^4.17.23",
    "@types/jest": "^30.0.0",
    "@types/morgan": "^1.9.10",
    "@types/node": "^22.18.1",
    "@types/react": "^19.1.12",
    "@types/react-dom": "^19.1.9",
    "@types/supertest": "^6.0.3",
    "@typescript-eslint/eslint-plugin": "^8.43.0",
    "@typescript-eslint/parser": "^8.43.0",
    "autoprefixer": "^10.4.21",
    "eslint": "^9.34.0",
    "eslint-config-next": "^15.5.2",
    "eslint-config-prettier": "^10.1.8",
    "eslint-plugin-prettier": "^5.5.4",
    "husky": "^9.1.7",
    "jest": "^30.1.3",
    "lint-staged": "^16.1.6",
    "mongodb-memory-server": "^10.2.0",
    "nodemon": "^3.1.10",
    "nx": "21.4.1",
    "postcss": "^8.5.6",
    "prettier": "^3.6.2",
    "supertest": "^7.1.4",
    "tailwindcss": "^4.1.13",
    "ts-jest": "^29.4.1",
    "ts-node": "^10.9.2",
    "typescript": "^5.9.2"
  },
  "lint-staged": {
    "apps/frontend/src/**/*.{ts,tsx}": [
      "eslint --fix --config eslint.config.js",
      "bash -c 'cd apps/frontend && npx tsc --noEmit'"
    ],
    "apps/api/src/**/*.{js,ts}": [
      "eslint --fix --config eslint.config.js",
      "bash -c 'cd apps/api && npx tsc --noEmit'"
    ],
    "libs/shared/**/*.ts": [
      "eslint --fix --config eslint.config.js",
      "bash -c 'npx tsc --noEmit --project libs/shared/types/tsconfig.lib.json && npx tsc --noEmit --project libs/shared/utils/tsconfig.lib.json'"
    ]
  },
  "nx": {}
}
